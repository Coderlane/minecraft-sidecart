// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Coderlane/minecraft-sidecart/server (interfaces: Server)

// Package server is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// GetServerInfo mocks base method
func (m *MockServer) GetServerInfo() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetServerInfo indicates an expected call of GetServerInfo
func (mr *MockServerMockRecorder) GetServerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockServer)(nil).GetServerInfo))
}

// GetType mocks base method
func (m *MockServer) GetType() Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(Type)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockServerMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockServer)(nil).GetType))
}
